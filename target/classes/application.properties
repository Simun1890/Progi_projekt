spring.h2.console.enabled: true

#spring.datasource.url: jdbc:h2:mem:testdb

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Port na kojem ce se vrtiti api
# Obavezno izloziti, ovu varijablu koristi Render
server.port=${PORT:8080}

# Korijenska putanja ("prefiks") za sve zahtjeve na backend - preporuca se postaviti ovo zbog proxy konfiguracije
# Ako je npr. u controlleru navedena putanja /test, moci ce joj se pristupiti pomocu putanje /api/test
server.servlet.context-path=/api

# Koristi se samo kao primjer koristenja environment varijable unutar TestController klase
# SERVER_MESSAGE je sada environment varijabla koja ce se mapirati na property "message", ako nije postavljena uzima se default vrijednost "Hello from backend! "
# message=${SERVER_MESSAGE:Hello from backend! }

# Lokacija Liquibase master chageloga
# spring.liquibase.change-log=classpath:/db/changelog/changelog-master.xml

# Konfiguracija baze podataka
# Izlaganje environment varijabli je nuzno da bismo mogli postaviti adresu, korisnicko ime i lozinku baze podataka na produkciji
# Stavljanje credentialsa produkcijske baze podataka direktno u kod je jako losa praksa!

# spring.datasource.url=jdbc:postgresql://dpg-clbn0i6g1b2c73cfe8d0-a/ozdravi_g11_t4
spring.datasource.url=jdbc:postgresql://dpg-clbn0i6g1b2c73cfe8d0-a.frankfurt-postgres.render.com/ozdravi_g11_t4
spring.datasource.username=ozdravi_g11_t4_user
spring.datasource.password=MUoxT3B4xGUFVFa8POkgYnxskUyJIGpX
# spring.datasource.driverClassName=DB_DRIVER:org.postgresql.Driver
# spring.jpa.hibernate.ddl-auto=<create | create-drop | update | validate | none>
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# PGPASSWORD=MUoxT3B4xGUFVFa8POkgYnxskUyJIGpX psql -h dpg-clbn0i6g1b2c73cfe8d0-a.frankfurt-postgres.render.com -U ozdravi_g11_t4_user ozdravi_g11_t4
